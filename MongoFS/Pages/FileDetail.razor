@page "/file/{fileId}"
@using MongoDB.Bson
@inject MongoService _ms;
@inject IJSRuntime jsRuntime;

<div class="mongofs-layout">
    <section class="mongofs-header">
        <h1>MongoFS</h1>
        <span class="subheader">FileSystem to save ‘em all.</span>
    </section>

    <section class="statistics">
        <div class="statistics-header">
            <h2>Statistics</h2>
            <ul>
                <li>Files: 42</li>
                <li>Folders: 14</li>
                <li>Drives: 4</li>
            </ul>
        </div>
        <ul>
            <li>Running on <b>ASP.NET 5</b></li>
            <li>Stored in <b>MongoDB</b></li>
        </ul>
        <span>Crafted with ❤️ by️ <b>Marián Trpkoš</b></span>
    </section>

    @if (file != null)
    {
        <section>

            @file.Name

            <span>Type:</span>
            <input placeholder="Type" @bind="file.Type"/>

            <button @onclick="async () => { await this.Save(); }">Save</button>
        </section>

        <section>
            <div id="monaco" style="width: 100%; height: 400px"></div>
        </section>
    }
    else
    {
        <span>Couldn't find file!</span>
    }
</div>


@code {

    [Parameter]
    public string FileId { get; set; }


    private FileModel file { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(this.FileId, out ObjectId id))
            file = await this._ms.GetFile(id);
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await this.jsRuntime.InvokeVoidAsync("CreateEditor", "monaco", StateService.ToMonacoType(this.file.Type), this.file.Content);
    }

    private async Task Save()
    {
        var content = await this.jsRuntime.InvokeAsync<string>("GetEditorData");
        Console.WriteLine(content);

        this.file.Content = content;

        await this._ms.UpdateFile(file);
        await this.jsRuntime.InvokeVoidAsync("BackUrl");
    }

}