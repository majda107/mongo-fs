@page "/drives/{id}"
@page "/drives/{id}/{folderId}"
@inject IJSRuntime jsRuntime

@using MongoDB.Bson
@using MongoDB.Bson.Serialization.IdGenerators
@using MongoDB.Driver.Core.Operations
@inject MongoService _ms;
@inject NavigationManager _nav;

<h3>Drive</h3>

@if (drive != null)
{
    <h4>@drive.Id</h4>
    <span>@(drive.Capacity)GB</span>

    <hr/>
    <button @onclick="async () => { await UpFolder(); }">Go up</button>
    @if (this.parent != null)
    {
        <span>@this.parent.Name</span>
    }
@*     @foreach (var section in path.Reverse()) *@
@*     { *@
@*         <span>/@(section.Name)</span> *@
@*     } *@
    <hr/>

    <ul>
        @foreach (var folder in folders)
        {
            <li >
                <span @onclick="async () => { await EnterFolder(folder); }">@folder.Name | @(folder.Size)GB</span>
                <button @onclick='async () => { await this._ms.DeleteFolder(folder.Id); await this.RefreshFolders(); }'>X</button>
            </li>
        }
        @foreach (var file in files)
        {
            <li >
                <span @onclick='() => { this._nav.NavigateTo($"/file/{file.Id}"); }'>[@file.Name] | @(file.Content?.Length ?? 0)GB</span>
                <button @onclick='async () => { await this._ms.DeleteFile(file.Id); await this.RefreshFolders(); }'>X</button>
            </li>
        }
    </ul>

    <input @bind="newName" placeholder="Folder name"/>
    <button @onclick="() => { CreateFolder(); }">Add folder</button>
    <button @onclick="() => { CreateFile(); }">Add file</button>
}

else
{
    <span>Couldn't find drive...</span>
}

@code {

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string FolderId { get; set; }

    private DriveModel drive;

    // private ObjectId parent = ObjectId.Empty;
    // private Stack<FolderModel> path = new Stack<FolderModel>();

    // private ObjectId parent
    // {
    //     get => path.FirstOrDefault()?.Id ?? ObjectId.Empty;
    // }
    private FolderModel parent;

    private IList<FolderModel> folders = new List<FolderModel>();
    private IList<FileModel> files = new List<FileModel>();


    private string newName = "";
    private bool rendered = false;

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.TryParse(this.Id, out ObjectId parsedId))
        {
            this.drive = await this._ms.GetDrive(parsedId);
            await this.RefreshFolders();
        }

        if (ObjectId.TryParse(this.FolderId, out ObjectId folder))
        {
    // this.path.Push(await this._ms.getfo);
            this.parent = await this._ms.GetDriveFolder(this.drive.Id, folder);
            await this.RefreshFolders();
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        this.rendered = true;
        return Task.CompletedTask;
    }

    private async Task RefreshFolders()
    {
        this.folders = await this._ms.GetFolders(drive.Id, this.parent?.Id ?? ObjectId.Empty);
        this.files = await this._ms.GetFolderFiles(drive.Id, this.parent?.Id ?? ObjectId.Empty);
        this.StateHasChanged();


        if (!this.rendered) return;
    // if (this.path.Count <= 0)
        if (this.parent == null)
            await this.jsRuntime.InvokeVoidAsync("ChangeUrl", $"/drives/{Id.ToString()}");
        else
            await this.jsRuntime.InvokeVoidAsync("ChangeUrl", $"/drives/{Id.ToString()}/{parent.Id.ToString()}");
    }


    private async Task CreateFolder()
    {
        await this._ms.CreateFolder(this.drive.Id, this.parent?.Id ?? ObjectId.Empty, this.newName);
        await this.RefreshFolders();
        this.newName = "";
    }

    private async Task CreateFile()
    {
        await this._ms.CreateFile(this.drive.Id, this.parent?.Id ?? ObjectId.Empty, this.newName);
        await this.RefreshFolders();
        this.newName = "";
    }


    private async Task EnterFolder(FolderModel folder)
    {
    // this.path.Push(folder);
        this.parent = folder;
        await this.RefreshFolders();

        this.StateHasChanged();
    }

    private async Task UpFolder()
    {
    // if (this.path.Count <= 0) return;

    // this.path.Pop();

        if (this.parent == null) return;

        this.parent = await this._ms.GetDriveFolder(this.drive.Id, this.parent.ParentId);
        await this.RefreshFolders();
    }

}