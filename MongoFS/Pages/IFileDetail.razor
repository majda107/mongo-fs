@using System.Globalization
@inject MongoService _ms;
@inject StateService _ss;

<div class="file-detail">
    @if (this.IFile == null)
    {
        <span>No content selected...</span>
    }
    else
    {
        @if (this.IFile is FolderModel ffolder)
        {
            <h3>/@IFile.Name</h3>
            <img src="icons/folder.svg" width="72"/>
        }
        else if (this.IFile is FileModel ffile)
        {
            <h3>@(IFile.Name).@(ffile.Type.ToLower())</h3>
            <img src="icons/file.svg" width="72"/>
        }

        <div class="data-grid">

            @if (this.IFile is FolderModel folder)
            {
                <span>Files:</span>
                <span>
                    <b>@folder.Files.Count.ToString()</b>
                </span>

                <span>Folders:</span>
                <span>
                    <b>@folder.Folders.Count.ToString()</b>
                </span>

                <span>Size:</span>
                <span>
                    <b>@folder.Size.ToString()</b>
                </span>
            }

            <span>Last edit:</span>
            <span>
                <b>@(this.IFile.LastEdit.Day.ToString())/@(this.IFile.LastEdit.Month.ToString())/@(this.IFile.LastEdit.Year.ToString()) @(this.IFile.LastEdit.ToString("hh:mm tt", System.Globalization.CultureInfo.InvariantCulture))</b>
            </span>

            <span>Created:</span>
            <span>
                <b>@(this.IFile.Created.Day.ToString())/@(this.IFile.Created.Month.ToString())/@(this.IFile.Created.Year.ToString()) @(this.IFile.Created.ToString("hh:mm tt", System.Globalization.CultureInfo.InvariantCulture))</b>
            </span>


            @* <span>Id:</span> *@
            @* <span> *@
            @*     <b>@this.IFile.Id.ToString()</b> *@
            @* </span> *@


        </div>

        <div class="file-detail-buttons">
            <button onclick="window.location.hash='share'">Share</button>
            @if (this.IFile is FolderModel)
            {
                <button class="danger" @onclick="async () => { await this._ms.DeleteFolder(this.IFile.Id); this.StateHasChanged(); }">Delete</button>
            }
            else if (this.IFile is FileModel)
            {
                <button class="danger" @onclick="async () => { await this._ms.DeleteFile(this.IFile.Id); this.StateHasChanged(); }">Delete</button>
            }
        </div>
    }

    @if (this.IFile != null)
    {
        <div class="overlay" id="share">
            <button class="overlay-close" onclick="window.location.hash = ''">
                <img src="icons/cross.svg"/>
            </button>

            <div class="overlay-form">
                <span>@this.IFile.Id.ToString()</span>
            </div>
        </div>
    }
</div>

@code {

    // [Parameter]
    public IFileModel IFile { get; set; }


    protected override async Task OnInitializedAsync()
    {
        this._ss.OnSelected += (o, e) =>
        {
            this.IFile = this._ss.Selected;
            this.InvokeAsync(this.StateHasChanged);
        };
    }

}