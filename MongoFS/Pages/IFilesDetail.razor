@using MongoDB.Bson
@inject MongoService _ms;
@inject NavigationManager _nav;

<section class="files-detail">
    @*     @foreach (var f in IFiles) *@
    @*     { *@
    @*         <li>@f.Id.ToString()</li> *@
    @*     } *@
    <div class="files-detail-header">
        <img @onclick="async () => { await UpFolder(); }" src="icons/up.svg"/>
        <span>/@(this.Parent?.Name ?? "...")</span>
        <input placeholder="Today I am looking for ... ?"/>
        <span>listing drive <b>@(this.Drive?.Name ?? "...")</b></span>
    </div>

    <hr/>

    <div class="files-detail-content">
        <table>
            <tbody>
            @foreach (var folder in this.folders)
            {
                <tr class='@(folder?.Id == this.Selected?.Id ? "selected" : "")' @onclick="async () => { await this.IFileSelected.InvokeAsync(folder); }" @ondblclick="async () => { await this.ParentSelected.InvokeAsync(folder); }">
                    <td>
                        <img src="icons/folder.svg"/>
                    </td>
                    <td>@folder.Name</td>
                    <td>@folder.Size.ToString()</td>
                    <td>2/12/2020 4:15PM</td>
                    <td>Folder</td>
                    <td>
                        <button class="danger">Delete</button>
                    </td>
                </tr>
            }

            @foreach (var file in this.files)
            {
                <tr class='@(file?.Id == this.Selected?.Id ? "selected" : "")' @onclick="async () => { await this.IFileSelected.InvokeAsync(file); }" @ondblclick="async () => { await this.OpenFile(file); }">
                    <td>
                        <img src="icons/file.svg"/>
                    </td>
                    <td>[@file.Name]</td>
                    <td>@file.Content.Length.ToString()</td>
                    <td>2/12/2020 4:15PM</td>
                    <td>File</td>
                    <td>
                        <button class="danger">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

</section>

@code {

    // [Parameter]
    // public IList<IFileModel> IFiles { get; set; } = new List<IFileModel>();

    [Parameter]
    public DriveModel Drive { get; set; }

    [Parameter]
    public FolderModel Parent { get; set; }


    [Parameter]
    public EventCallback<FolderModel> ParentSelected { get; set; }

    [Parameter]
    public EventCallback<IFileModel> IFileSelected { get; set; }

    [Parameter]
    public IFileModel Selected { get; set; }


    private IList<FolderModel> folders = new List<FolderModel>();
    private IList<FileModel> files = new List<FileModel>();

    public async Task UpFolder()
    {
        if (this.Parent == null) return;

        var p = await this._ms.GetDriveFolder(this.Drive.Id, this.Parent.ParentId);
        await this.ParentSelected.InvokeAsync(p);
    }


    public async Task OpenFile(FileModel file)
    {
        this._nav.NavigateTo($"/file/{file.Id.ToString()}");
    }


    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Trying to retreive disk folders...");
        if (this.Drive == null) return;

        this.folders = await this._ms.GetFolders(this.Drive.Id, this.Parent?.Id ?? ObjectId.Empty);
        this.files = await this._ms.GetFolderFiles(this.Drive.Id, this.Parent?.Id ?? ObjectId.Empty);
    }

}