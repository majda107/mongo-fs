@using MongoDB.Bson
@using System.Timers
@using System.Threading
@inject MongoService _ms;
@inject StateService _ss;
@inject NavigationManager _nav;
@inject IJSRuntime jsRuntime;

<section class="files-detail">
    @*     @foreach (var f in IFiles) *@
    @*     { *@
    @*         <li>@f.Id.ToString()</li> *@
    @*     } *@
    <div class="files-detail-header">
        <img @onclick="async () => { await UpFolder(); }" src="icons/up.svg"/>
        <span>/@(this.Parent?.Name ?? "...")</span>
        <input placeholder="Today I am looking for ... ?" value="@searched" @oninput="e => searched = e?.Value?.ToString()" @onkeyup="@Debounce"/>
        <span>listing drive <b>@(this.Drive?.Name ?? "...")</b></span>
    </div>

    <hr/>

    <div class="files-detail-content">
        @if (this.refreshing)
        {
            <div class="files-detail-content-working"></div>
        }

        <table>
            <tbody>
            @foreach (var folder in this.folders)
            {
                <tr class='@(folder?.Id == this._ss.Selected?.Id ? "selected" : "")' @onclick="@(async () => { await this.SelectFile(folder); })" @ondblclick="@(async () => { await this.ParentSelected.InvokeAsync(folder); })">
                    <td>
                        <img src="icons/folder.svg"/>
                    </td>
                    <td>@folder.Name</td>
                    <td>@folder.Size.ToString()</td>
                    <td>2/12/2020 4:15PM</td>
                    <td>Folder</td>
                    <td>
                        <button class="danger" @onclick="async () => { await this.DeleteFolder(folder); }">Delete</button>
                    </td>
                </tr>
            }

            @foreach (var file in this.files)
            {
                <tr class='@(file?.Id == this._ss.Selected?.Id ? "selected" : "")' @onclick="async () => { await this.SelectFile(file); }" @ondblclick="async () => { await this.OpenFile(file); }">
                    <td>
                        <img src="icons/file.svg"/>
                    </td>
                    <td>@(file.Name).@(file.Type.ToLower())</td>
                    <td>@(file.Content?.Length.ToString() ?? "0")</td>
                    <td>2/12/2020 4:15PM</td>
                    <td>File</td>
                    <td>
                        <button class="danger" @onclick="async () => { await this.DeleteFile(file); }">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <div class="files-detail-content-buttons">
            <button class="primary" onclick="window.location.hash='new-file'">New file</button>
            <button class="primary" onclick="window.location.hash='#new-folder'">New folder</button>
        </div>
    </div>

</section>

@code {

    // [Parameter]
    // public IList<IFileModel> IFiles { get; set; } = new List<IFileModel>();

    [Parameter]
    public DriveModel Drive { get; set; }

    [Parameter]
    public FolderModel Parent { get; set; }


    [Parameter]
    public EventCallback<FolderModel> ParentSelected { get; set; }

    // [Parameter]
    // public EventCallback<IFileModel> IFileSelected { get; set; }
    public async Task SelectFile(IFileModel file) => this._ss.Selected = file;


    // [Parameter]
    // public IFileModel Selected { get; set; }


    private string searched = "";
    private bool refreshing = false;

    private CancellationTokenSource dts = new CancellationTokenSource();


    // protected async Task Search(KeyboardEventArgs e)
    protected async Task Search()
    {
    // if (e.Code != "Enter") return;

        Console.WriteLine("Searching!");

        if (searched == "")
        {
            await this.Refresh();
        }
        else
        {
            this.files = await this._ms.SearchFiles(this.Drive.Id, this.searched);
            this.folders = await this._ms.SearchFolders(this.Drive.Id, this.searched);

            Console.WriteLine($"Found {this.files.Count} files and {this.folders.Count} folders");
        }

        this.InvokeAsync(this.StateHasChanged);
    }

    protected async Task Debounce()
    {
        this.refreshing = true;
        
        dts.Cancel();
        dts = new CancellationTokenSource();
        await Task.Delay(500, dts.Token).ContinueWith(async (task) =>
        {
            if (task.IsCanceled) return;
            this.refreshing = false;

            Console.WriteLine($"Debounce! {this.searched}");
            await this.Search();
        });
    }


    private IList<FolderModel> folders = new List<FolderModel>();
    private IList<FileModel> files = new List<FileModel>();

    public async Task UpFolder()
    {
        if (this.Parent == null) return;

        var p = await this._ms.GetDriveFolder(this.Drive.Id, this.Parent.ParentId);
        await this.ParentSelected.InvokeAsync(p);
    }


    public async Task OpenFile(FileModel file)
    {
    // HACK prevent from parameter set call
        this.opening = true;

        var url = $"/file/{file.Id.ToString()}";

    // HACK prevent from parameter set call
        await Task.Delay(200);

        this._nav.NavigateTo(url);
        this._ss.Selected = null;
    }


    private bool rendered = false;
    private bool opening = false;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        this.rendered = true;
        return Task.CompletedTask;
    }

    private async Task DeleteFolder(FolderModel f)
    {
        await this._ms.DeleteFolder(f.Id);
        await this.RefreshFolders();

        this._ss.FireDeleted(f.Size);

        this.StateHasChanged();
    }

    private async Task DeleteFile(FileModel f)
    {
        await this._ms.DeleteFile(f.Id);
        await this.RefreshFiles();

        this._ss.FireDeleted(f.Content?.Length ?? 0);

        this.StateHasChanged();
    }

    private async Task RefreshFolders() => this.folders = await this._ms.GetFolders(this.Drive.Id, this.Parent?.Id ?? ObjectId.Empty);
    private async Task RefreshFiles() => this.files = await this._ms.GetFolderFiles(this.Drive.Id, this.Parent?.Id ?? ObjectId.Empty);


    private async Task Refresh()
    {
        this.refreshing = true;

        await Task.WhenAll(
            RefreshFiles(),
            RefreshFolders()
            );

        this.refreshing = false;
    }


    protected override async Task OnParametersSetAsync()
    {
    // OPENING CHANGEURL PREVENTION HACK
        if (this.Drive == null || this.opening) return;

    // this.folders = await this._ms.GetFolders(this.Drive.Id, this.Parent?.Id ?? ObjectId.Empty);
    // this.files = await this._ms.GetFolderFiles(this.Drive.Id, this.Parent?.Id ?? ObjectId.Empty);
    // await this.RefreshFolders();
    // await this.RefreshFiles();
        await this.Refresh();

        if (this.Drive == null || !rendered) return;

        if (this.Parent == null)
            await this.jsRuntime.InvokeVoidAsync("ChangeUrl", $"/{this.Drive.Id.ToString()}");
        else
            await this.jsRuntime.InvokeVoidAsync("ChangeUrl", $"/{this.Drive.Id.ToString()}/{this.Parent.Id.ToString()}");
    }

}